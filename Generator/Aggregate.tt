<#@ template language="C#" #>
using System;
using System.Collections;
using System.Collections.Generic;

namespace Sample.Generated {
	[IoC]
    public sealed class <#=Nm#>Aggregate : IEnumerable<<#=Row#>>
    {
		private readonly Dictionary<Guid, <#=Row#>> 
			_byId = new Dictionary<Guid, <#=Row#>> ();
		public void Create(<#=Row#> row) => _byId.Add(row.Id, row);
		public void Update(<#=Row#> row) => _byId[row.Id] = row;
		public void Remove(Guid id) => _byId.Remove(id);
		public <#=Row#> Get(Guid id) {
			<#=Row#> result;
			return _byId.TryGetValue(id, out result) ? result : null;
		}
	    public IEnumerator<<#=Row#>> GetEnumerator() => _byId.Values.GetEnumerator();
	    IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }
	[Dto]
    public sealed class <#=Row#>
    {
		public Guid Id { get; set; }
		public int RowVersion { get; set; }
<#
	foreach (var prop in _type.GetProperties())
	{
#>
		public <#= prop.Type #> <#= prop.Name #> { get; set; }
<#
	} 
#>
    }
}
<#+
    private readonly MetaType _type;
    private string Nm => _type.Name;
    private string Row => Nm + "Row";
#>
<#@ template language="C#" #>
<#@ import namespace="System.Diagnostics" #>
using System.ComponentModel.DataAnnotations;
using System.Linq;
using Generator;

namespace Sample.Generated {
    public sealed class Delete<#=_type.Name#>Validator
    {
<#
    foreach (var t in _type.AggregatorRequiredByDelete)
    {
#>
		private readonly <#=t.Name#>Aggregate _<#= t.Name#>Aggregate;
<#
    }
#>

		public Delete<#=_type.Name#>Validator(<#=
			_type.AggregatorRequiredByDelete.Join(
				t => $"{t.Name}Aggregate {t.Name}Aggregate")#>)
		{
<#
    foreach (var t in _type.AggregatorRequiredByDelete)
    {
#>
			_<#=t.Name#>Aggregate = <#=t.Name#>Aggregate;
<#
    }
#>
		}
		public ValidationResult Validate(Delete<#=_type.Name#> commit)
		{
			if (!_<#=_type.Name#>Aggregate.ById.ContainsKey(commit.Id))
				return new ValidationResult("Did not find <#=_type.Name#> to be Deleted: " + commit.Id);

<#
    foreach (var p in _type.DependsUpon)
    {
		if (p.Property.DeclaringType == null)
			throw new Exception("p.Property.DeclaringType != null");
        var aggregate = $"_{p.Property.DeclaringType.Name}Aggregate";
#>
			if (<#=aggregate#>.ById.Values
				.Any(p => p.<#=p.Name#> == commit.Id))
				return new ValidationResult(
					$"Can not delete <#=_type.Name#> {commit.Id} " +
					$"because other objects depend on it: {<#=aggregate#>.ById.Values.Where(p => p.<#=p.Name#> == commit.Id).Join(p => p.Id)}");
<#
    }
#>
			return ValidationResult.Success;
		}
    }
}

<#+
    private readonly MetaType _type;
#>
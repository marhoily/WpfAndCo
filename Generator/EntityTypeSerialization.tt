<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.Data.Entity" #>
using System;
using System.IO;

namespace Sample.Generated {
public partial class Raw {
    partial class <#= _type.ClrType.Name #>
    {
        [Flags]
        public enum F
        {
<#
    int counter = 0;
	foreach (var prop in _type.GetProperties())
	{
#>
		    <#= prop.Name #> = 1 << <#= counter #> ,
<#
        counter++;
	}
#>
        }
        public BinaryKey __Key
        {
            get
            {
                var builder = new BinaryKeyBuilder();
<#
	foreach (var prop in _type.GetProperties())
        if (prop.IsPrimaryKey())
	    {
#>
		        builder.Add(<#= prop.Name #>);
<#
	    }
#>
                return builder.Build();
            }
        }
        public void SerializeKey(BinaryWriter writer) 
        {
<#
	foreach (var prop in _type.GetProperties())
        if (prop.IsPrimaryKey())
	    {
#>
		    writer.Write(<#= prop.Name #>);
<#
	    }
#>
        }
        public void DeserializeKey(BinaryReader reader) 
        {
<#
	foreach (var prop in _type.GetProperties())
        if (prop.IsPrimaryKey())
	    {
#>
		    <#= prop.Name #> = reader.Read<#= prop.ClrType.Name #>();
<#
	    }
#>
        }
        public void SerializeAll(BinaryWriter writer) 
        {
<#
	foreach (var prop in _type.GetProperties())
	{
#>
		    writer.Write(<#= prop.Name #>);
<#
	}
#>
        }
        public void DeserializeAll(BinaryReader reader) 
        {
<#
	foreach (var prop in _type.GetProperties())
	{
#>
		    <#= prop.Name #> = reader.Read<#= prop.ClrType.Name #>();
<#
	}
#>
        }
        public void SerializeChanged(BinaryWriter writer, <#= _type.ClrType.Name #> old) 
        {
            F changed = 0;
<#
	foreach (var prop in _type.GetProperties())
        if (!prop.IsPrimaryKey())
	    {
#>
            if (old.<#= prop.Name #> != <#= prop.Name #>)
                changed |= F.<#= prop.Name #>;
<#
	    }
#>
            writer.WriteEnum(changed);
<#
	foreach (var prop in _type.GetProperties())
        if (!prop.IsPrimaryKey())
	    {
#>
            if (changed.HasFlag(F.<#= prop.Name #>))
                writer.Write(<#= prop.Name #>);
<#
	    }
#>
        }
        public void DeserializeChanged(BinaryReader reader) 
        {
            var changes = reader.ReadEnum<F>();
<#
	foreach (var prop in _type.GetProperties())
        if (!prop.IsPrimaryKey())
	    {
#>
            if (changes.HasFlag(F.<#= prop.Name #>))
                <#= prop.Name #> = reader.Read<#= prop.ClrType.Name #>();
<#
	    }
#>
        }
    }
}}


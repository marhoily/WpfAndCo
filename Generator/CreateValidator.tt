<#@ template language="C#" #>
using System;
using System.ComponentModel.DataAnnotations;

namespace Sample.Generated {
    [IoC]
    public sealed class Create<#=_type.Name#>Validator : IValidator<Create<#=_type.Name#>Command>
    {
<#
		//    ________
		//___/ Fields \________________________________________
    foreach (var p in _type.NavigationProperties)
    {
#>
		private readonly <#=p.ClrType.Name#>Aggregate <#=p.Name.AsField()#>Aggregate;
<#
        
    }
		//    _____________
		//___/ Constructor \___________________________________
#>	
		public Create<#=_type.Name#>Validator(
			<#=_type.NavigationProperties.Join(p 
				=> $"{p.ClrType.Name}Aggregate {p.Name.AsLocal()}Aggregate") #>)
		{
<#
    foreach (var p in _type.NavigationProperties)
    {
#>
			<#=p.Name.AsField()#>Aggregate = <#=p.Name.AsLocal()#>Aggregate;
<#
        
    }
#>	
		}
<#
		//    ____________
		//___/ Validate() \____________________________________
#>
		public ValidationResult Validate(Create<#=_type.Name#>Command command)
		{
<#
    foreach (var p in _type.NavigationProperties)
    {
		if (!p.IsRequired)
		{
#>
			if (command.<#=p.Name#> != Guid.Empty)
<#
		}
#>
			if (!<#=p.Name.AsField()#>Aggregate.ById.ContainsKey(command.<#=p.Name#>))
				return new ValidationResult(
					"Wrong <#=p.Name#>: " + command.<#=p.Name#>);
<#
    }
#>		
			return ValidationResult.Success;
		}
    }
}

<#+
    private readonly MetaType _type;
#>
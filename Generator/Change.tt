<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;

namespace Sample.Generated {
public partial class Raw {
    public sealed partial class Cs<#= _type.ClrType.Name #>
    {
		private readonly Table<#= _type.ClrType.Name #> _table;
		public Cs<#= _type.ClrType.Name #>(Table<#= _type.ClrType.Name #> table) { _table = table; }

		public readonly Dictionary<<#= _type.ClrType.Name #>.PK, <#= _type.ClrType.Name #>> Inserts
			= new Dictionary<<#= _type.ClrType.Name #>.PK, <#= _type.ClrType.Name #>>();

		public readonly Dictionary<<#= _type.ClrType.Name #>.PK, <#= _type.ClrType.Name #>> Updates
			= new Dictionary<<#= _type.ClrType.Name #>.PK, <#= _type.ClrType.Name #>>();

		public readonly HashSet<<#= _type.ClrType.Name #>.PK> Deletes
			= new HashSet<<#= _type.ClrType.Name #>.PK>();

		public <#= _type.ClrType.Name #> this[<#= _type.ClrType.Name #>.PK key]
		{
			get 
			{
				<#= _type.ClrType.Name #> original;
				<#= _type.ClrType.Name #> inserted;
				if (!_table.PrimaryKey.TryGetValue(key, out original)) 
					return Inserts.TryGetValue(key, out inserted) ? inserted : null;
				if (Deletes.Contains(key)) return null;
				<#= _type.ClrType.Name #> result;
				return Updates.TryGetValue(key, out result) ? result : original;
			}
		}
		//public <#= _type.ClrType.Name #> GetOrAdd(<#= _type.ClrType.Name #>.PK key)
		//{
		//	if (Deletes.Contains(key)) throw new InvalidArgumentException();
		//	<#= _type.ClrType.Name #> result;
		//	if (Updates.TryGetValue(key, out result)) return result;
		//	result = new 
		//	Inserts.TryGetValue(key, out result)) return result;
		//	return null;
		//
		//}
    }
}}


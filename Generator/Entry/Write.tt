<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.Data.Entity" #>
using System;
using System.IO;

namespace Sample.Generated {
public partial class Raw {
    partial class <#= _type.ClrType.Name #> : IBinarySerializable
    {
        public void WriteAllProperties(BinaryWriter writer) 
        {
<#
	foreach (var prop in _type.GetProperties())
	{
#>
		    writer.Write(<#= prop.Name #>);
<#
	}
#>
        }
        public void SerializeChanged(BinaryWriter writer, F changed) 
        {
            writer.WriteEnum(changed);
<#
	foreach (var prop in _type.GetProperties())
        if (!prop.IsPrimaryKey())
	    {
#>
            if (changed.HasFlag(F.<#= prop.Name #>))
                writer.Write(<#= prop.Name #>);
<#
	    }
#>
        }
        public void WriteChangedProperties(BinaryWriter writer)
		{
			if (IsModified)
			{
				SerializeChanged(writer, GetChanges());
			}
		}

        public void ReadChanges(BinaryReader reader) 
        {
            var changes = reader.ReadEnum<F>();
<#
	foreach (var prop in _type.GetProperties())
        if (!prop.IsPrimaryKey())
	    {
#>
            if (changes.HasFlag(F.<#= prop.Name #>))
                <#= prop.Name #> = reader.Read<#= prop.ClrType.Name #>();
<#
	    }
#>
        }
    }
}}


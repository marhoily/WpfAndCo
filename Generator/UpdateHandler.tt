<#@ template language="C#" #>
using AutoMapper;

namespace Sample.Generated {
    [IoC]
    public sealed class Update<#=Nm#>Handler : IHandler<<#=Command#>>
    {
        private static readonly IMapper Mapper = 
            new MapperConfiguration(cfg =>
            {
                cfg.CreateMap<<#=Command#>, <#=Row#>>()
                    .ForMember(dst => dst.RowVersion,
                        opt => opt.ResolveUsing(src => src.RowVersion + 1));
                cfg.CreateMap<<#=Command#>, <#=Event#>>();
            })
            .CreateMapper();
		private readonly EventPublisher _publisher;
		private readonly <#=Aggregate#> _aggregate;

		public Update<#=Nm#>Handler(EventPublisher publisher, <#=Aggregate#> aggregate)
		{
			_publisher = publisher;
			_aggregate = aggregate;
		}
		public void Handle(<#=Command#> command)
		{
			_aggregate.Update(Mapper.Map<<#=Row#>>(command));
			_publisher.Publish(Mapper.Map<<#=Event#>>(command));
		}
    }
}

<#+
    private readonly MetaType _type;
    private string Nm => _type.Name;
    private string Row => Nm + "Row";
    private string Aggregate => Nm + "Aggregate";
    private string Command => $"Update{_type.Name}Command";
    private string Event => $"{_type.Name}UpdatedEvent";
#>
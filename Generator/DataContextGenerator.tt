<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System.Collections.Generic;
using System.IO;

namespace Sample.Generated {
public partial class Raw {
    public sealed class DataContext
    {
        public enum E
        {
<#
	foreach (var type in _model.GetEntityTypes())
	{
#>
		    <#= type.ClrType.Name #>,
<#
	}
#>
        }
<#
	foreach (var type in _model.GetEntityTypes())
	{
#>
        public readonly Dictionary<<#= type.ClrType.Name #>.PK, <#= type.ClrType.Name #>> 
            Pk<#= type.ClrType.Name #> = new Dictionary<<#= type.ClrType.Name #>.PK, <#= type.ClrType.Name #>>();
<#
	}
#>
        public void ReadDeletes(BinaryReader reader)
        {
            var count = reader.ReadInt32();
            for (var i = 0; i < count; i++)
            {
                switch (reader.ReadEnum<E>())
                {
<#
	foreach (var type in _model.GetEntityTypes())
	{
#>
                    case E.<#= type.ClrType.Name #>: {
                            var k = <#= type.ClrType.Name #>.ReadPk(reader);
                            Pk<#= type.ClrType.Name #>.Remove(k);
                        }
                        break;
<#
	}
#>
                }
            }
        }
    }
}}

